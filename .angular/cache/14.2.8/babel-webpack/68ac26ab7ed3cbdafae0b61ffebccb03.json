{"ast":null,"code":"import { __awaiter } from \"tslib\";\n/*\n  Copyright 2019 Esri\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport { ElementRef, EventEmitter } from \"@angular/core\";\nimport { setDefaultOptions, loadModules } from 'esri-loader';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"mapViewNode\"];\nexport let EsriMapComponent = /*#__PURE__*/(() => {\n  class EsriMapComponent {\n    constructor() {\n      this.mapLoadedEvent = new EventEmitter(); // Attributes\n\n      this.zoom = 11;\n      this.center = [-73.935242, 40.730610];\n      this.basemap = \"arcgis-navigation\";\n      this.loaded = false;\n      this.pointCoords = [-73.935242, 40.730610];\n      this.dir = 0;\n      this.count = 0;\n      this.timeoutHandler = null;\n    }\n\n    initializeMap() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          // configure esri-loader to use version x from the ArcGIS CDN\n          // setDefaultOptions({ version: '3.3.0', css: true });\n          setDefaultOptions({\n            css: true\n          }); // Load the modules for the ArcGIS API for JavaScript\n\n          const [esriConfig, Map, MapView, FeatureLayer, Graphic, Point, GraphicsLayer, route, RouteParameters, FeatureSet, Expand, Search, Legend, LayerList, MapImageLayer, Home] = yield loadModules([\"esri/config\", \"esri/Map\", \"esri/views/MapView\", \"esri/layers/FeatureLayer\", \"esri/Graphic\", \"esri/geometry/Point\", \"esri/layers/GraphicsLayer\", \"esri/rest/route\", \"esri/rest/support/RouteParameters\", \"esri/rest/support/FeatureSet\", \"esri/widgets/Expand\", \"esri/widgets/Search\", \"esri/widgets/Legend\", \"esri/widgets/LayerList\", \"esri/layers/MapImageLayer\", \"esri/widgets/Home\"]);\n          esriConfig.apiKey = \"AAPK4038e29fa0f74e0b8de1e11638e315f7tQdieJSSWdSXfF2Pv3hfTdEnEDKViIoVKZcxNbpqpJujF5y3VG8epOt98WKFYzQ3\";\n          this._Map = Map;\n          this._MapView = MapView;\n          this._FeatureLayer = FeatureLayer;\n          this._Graphic = Graphic;\n          this._GraphicsLayer = GraphicsLayer;\n          this._Route = route;\n          this._RouteParameters = RouteParameters;\n          this._FeatureSet = FeatureSet;\n          this._Point = Point;\n          this._Expand = Expand;\n          this._Legend = Legend;\n          this._LayerList = LayerList;\n          this._MapImageLayer = MapImageLayer;\n          this._Home = Home; // Configure the Map\n\n          const mapProperties = {\n            basemap: this.basemap\n          };\n          this.map = new Map(mapProperties);\n          const trailheadsRenderer = {\n            \"type\": \"simple\",\n            \"symbol\": {\n              \"type\": \"picture-marker\",\n              \"url\": \"../../../../assets/restaurant-icon.svg\",\n              \"width\": \"18px\",\n              \"height\": \"18px\"\n            }\n          }; // Define a pop-up for Trailheads\n\n          const Restaurantsheads = {\n            \"title\": \"{NAME} [{PRICE_RANGE}]\",\n            \"content\": \"<br><img src='{IMAGE_URL}' height='150' width='200'><br>\" + \"This restaurant has <b>{REVIEWS}</b> based on {NO_OF_REVIEWS}. <br>\" + \"<br> <b>Type:</b> {TYPE} \" + \"<br><b>Street Address:</b> {STREET_ADDRESS} \" + \"<br><b>Contact Number:</b> {CONTACT_NUMBER}\" + \"<br><b>Menu:</b> {MENU}<br>\" + \"<br><a href='{TRIP_ADVISOR_URL}'> Click here to visit the Trip Advisor URL </a>\"\n          };\n          const trailheadsLabels = {\n            symbol: {\n              type: \"text\",\n              color: \"#FFFFFF\",\n              haloColor: \"#5E8D74\",\n              haloSize: \"2px\",\n              font: {\n                size: \"12px\",\n                family: \"Noto Sans\",\n                style: \"italic\",\n                weight: \"normal\"\n              }\n            },\n            labelPlacement: \"above-center\"\n          }; //add traffic layer\n\n          const trafficLayer = new MapImageLayer({\n            url: \"https://traffic.arcgis.com/arcgis/rest/services/World/Traffic/MapServer\",\n            dpi: 48,\n            imageFormat: \"png32\",\n            refreshInterval: 1,\n            useViewTime: false\n          });\n          this.map.add(trafficLayer); // Trailheads feature layer (points)\n\n          const restaurantsLayer = new this._FeatureLayer({\n            title: 'Restaurants',\n            url: \"https://services7.arcgis.com/pTj9WvqAiBmhC4U7/arcgis/rest/services/nycrestaurants/FeatureServer/0\",\n            outFields: [\"ID\", \"NAME\", \"STREET_ADDRESS\", \"LOCATION\", \"TYPE\", \"NO_OF_REVIEWS\", \"REVIEWS\", \"COMMENTS\", \"CONTACT_NUMBER\", \"TRIP_ADVISOR_URL\", \"PRICE_RANGE\", \"MENU\", \"LATITUDE\", \"LONGITUDE\", \"IMAGE_URL\"],\n            popupTemplate: Restaurantsheads,\n            renderer: trailheadsRenderer,\n            labelingInfo: [trailheadsLabels]\n          });\n          this.map.add(restaurantsLayer); // Initialize the MapView\n\n          const mapViewProperties = {\n            container: this.mapViewEl.nativeElement,\n            center: this.center,\n            zoom: this.zoom,\n            map: this.map\n          };\n          this.view = new MapView(mapViewProperties); //add Search Widget\n\n          const searchWidget = new Search({\n            view: this.view,\n            allPlaceholder: \"Search a location\",\n            includeDefaultSources: false,\n            sources: [{\n              layer: restaurantsLayer,\n              searchFields: [\"NAME\", \"STREET_ADDRESS\"],\n              displayFields: [\"NAME\", \"STREET_ADDRESS\"],\n              exactMatch: false,\n              outFields: [\"LOCATION\"],\n              name: \"NYC Restaurants\",\n              placeholder: \"Find a restaurant in NYC\"\n            }, {\n              name: \"All locations\",\n              placeholder: \"Search anything\",\n              apiKey: esriConfig.apiKey,\n              singleLineFieldName: \"SingleLine\",\n              url: \"https://geocode-api.arcgis.com/arcgis/rest/services/World/GeocodeServer\"\n            }]\n          });\n          this.view.ui.add(searchWidget, {\n            position: \"top-left\",\n            index: 0\n          }); // Create helpful instructions\n\n          const sampleInstructions = document.createElement(\"div\");\n          sampleInstructions.setAttribute(\"style\", \"backgound-color: white\");\n          sampleInstructions.id = \"sampleInstructions\";\n          sampleInstructions.innerHTML = \"Click on the blue icons to see the restaurants and their details.<br></br>You can filter them by cuisine (top left).<br></br> Select two points by clicking anywhere on the map to find the route between them.<br></br> You can hide/unhide layers from the layer list in the bottom left corner.\";\n          this.view.ui.add([new Expand({\n            expandIconClass: \"esri-icon-question\",\n            expandTooltip: \"How to use this map\",\n            view: this.view,\n            content: sampleInstructions,\n            group: \"top-left\"\n          })], \"top-left\");\n          const homeBtn = new this._Home({\n            view: this.view\n          });\n          this.view.ui.add(homeBtn, \"top-left\");\n          const attractionsLayer = new this._GraphicsLayer({\n            title: 'Tourist attractions',\n            graphics: []\n          });\n          this.map.add(attractionsLayer); // Empire State\n\n          this.addPoint(-73.9857, 40.7484, attractionsLayer); // Liberty Statue\n\n          this.addPoint(-74.0445, 40.6892, attractionsLayer); // Central Park\n\n          this.addPoint(-73.9682, 40.7850, attractionsLayer); // Times Square\n\n          this.addPoint(-73.9851, 40.7588, attractionsLayer); // Brooklyn Bridge\n\n          this.addPoint(-73.9970, 40.7060, attractionsLayer); // Grand Central Terminal\n\n          this.addPoint(-73.9772, 40.7526, attractionsLayer);\n          this.view.when(() => {\n            const layerList = new LayerList({\n              view: this.view\n            }); // Add widget to the top right corner of the view\n\n            this.view.ui.add(layerList, \"bottom-leading\");\n          });\n          this.view.on(\"click\", event => {\n            if (this.view.graphics.length === 0) {\n              this.addGraphic(\"start\", event.mapPoint);\n            } else if (this.view.graphics.length === 1) {\n              this.addGraphic(\"finish\", event.mapPoint);\n              this.getRoute();\n            } else {\n              this.view.graphics.removeAll();\n              this.view.ui.empty(\"top-right\");\n              this.addGraphic(\"start\", event.mapPoint);\n            }\n          });\n          this.filterData(restaurantsLayer);\n          this.addLegend(restaurantsLayer, attractionsLayer); // Fires `pointer-move` event when user clicks on \"Shift\"\n          // key and moves the pointer on the view.\n\n          this.view.on('pointer-move', [\"Shift\"], event => {\n            let point = this.view.toMap({\n              x: event.x,\n              y: event.y\n            });\n            console.log(\"map moved: \", point.longitude, point.latitude);\n          });\n          yield this.view.when(); // wait for map to load\n\n          console.log(this.view.graphics);\n          return this.view;\n        } catch (error) {\n          console.log(\"EsriLoader: \", error);\n        }\n      });\n    }\n\n    addGraphic(type, point) {\n      let color = \"#ffffff\";\n      let outlineColor = \"#000000\";\n      let size = \"12px\";\n\n      if (type == \"start\") {\n        color = \"#ffffff\";\n      } else {\n        color = \"#96C6F9\";\n        outlineColor = \"#ffffff\";\n      }\n\n      const graphic = new this._Graphic({\n        symbol: {\n          type: \"simple-marker\",\n          color: color,\n          size: size,\n          outline: {\n            color: outlineColor,\n            width: \"1px\"\n          }\n        },\n        geometry: point\n      });\n      this.view.graphics.add(graphic);\n    }\n\n    addPoint(long, lat, attractionsLayer) {\n      const empireStateBuildingPoint = {\n        type: \"point\",\n        longitude: long,\n        latitude: lat\n      };\n      const orangePointGraphic = new this._Graphic({\n        geometry: empireStateBuildingPoint,\n        symbol: {\n          type: \"simple-marker\",\n          color: \"#0B20F5\",\n          size: \"10px\",\n          outline: {\n            color: \"#27255C\",\n            width: \"1px\"\n          }\n        }\n      });\n      attractionsLayer.add(orangePointGraphic);\n    }\n\n    addLegend(restaurantsLayer, attractionsLayer) {\n      const legend = new this._Legend({\n        view: this.view,\n        layerInfos: [{\n          layer: restaurantsLayer,\n          title: \"Restaurants\"\n        }]\n      });\n      this.view.ui.add(legend, \"bottom-left\");\n    }\n\n    filterData(restaurantsLayer) {\n      let floodLayerView;\n      const cuisinesNodes = document.querySelectorAll(`.cuisine-item`);\n      const cuisinesElement = document.getElementById(\"cuisines-filter\"); // click event handler for cuisines choices\n\n      cuisinesElement.addEventListener(\"click\", filterBycuisine); // User clicked on Winter, Spring, Summer or Fall\n      // set an attribute filter on flood warnings layer view\n      // to display the warnings issued in that cuisine\n\n      function filterBycuisine(event) {\n        const selectedcuisine = event.target.getAttribute(\"data-cuisine\");\n        console.log(selectedcuisine);\n        floodLayerView.filter = {\n          where: \"Type LIKE '%\" + selectedcuisine + \"%'\"\n        };\n      }\n\n      this.view.whenLayerView(restaurantsLayer).then(layerView => {\n        // flash flood warnings layer loaded\n        // get a reference to the flood warnings layerview\n        floodLayerView = layerView; // set up UI items\n\n        cuisinesElement.style.visibility = \"visible\";\n        const cuisinesExpand = new this._Expand({\n          view: this.view,\n          content: cuisinesElement,\n          expandIconClass: \"esri-icon-filter\",\n          group: \"bottom-left\"\n        }); //clear the filters when user closes the expand widget\n\n        cuisinesExpand.watch(\"expanded\", () => {\n          if (!cuisinesExpand.expanded) {\n            floodLayerView.filter = null;\n          }\n        });\n        this.view.ui.add(cuisinesExpand, \"top-left\");\n        this.view.ui.add(\"titleDiv\", \"bottom-right\");\n      });\n    }\n\n    getRoute() {\n      const routeUrl = \"https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World\";\n      const routeParams = new this._RouteParameters({\n        stops: new this._FeatureSet({\n          features: this.view.graphics.toArray()\n        }),\n        returnDirections: true,\n        directionsLanguage: \"en\"\n      });\n\n      this._Route.solve(routeUrl, routeParams).then(data => {\n        if (data.routeResults.length > 0) {\n          this.showRoute(data.routeResults[0].route);\n          this.showDirections(data.routeResults[0].directions.features);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    showRoute(routeResult) {\n      routeResult.symbol = {\n        type: \"simple-line\",\n        color: [63, 81, 186],\n        width: 3\n      };\n      this.view.graphics.add(routeResult, 0);\n    }\n\n    showDirections(directions) {\n      function showRouteDirections(directions) {\n        const directionsList = document.createElement(\"ol\");\n        directions.forEach(function (result, i) {\n          const direction = document.createElement(\"li\");\n          direction.innerHTML = result.attributes.text + (result.attributes.length > 0 ? \" (\" + result.attributes.length.toFixed(2) + \" miles)\" : \"\");\n          directionsList.appendChild(direction);\n        });\n        directionsElement.appendChild(directionsList);\n      }\n\n      const directionsElement = document.createElement(\"div\");\n      directionsElement.innerHTML = \"<h3>Directions</h3>\";\n      directionsElement.style.marginTop = \"0\";\n      directionsElement.style.padding = \"0 15px\";\n      directionsElement.className = \"esri-widget esri-widget--panel esri-directions__scroller directions\";\n      directionsElement.style.backgroundColor = \"#FFFFFF\";\n      directionsElement.style.minHeight = \"365px\";\n      showRouteDirections(directions);\n      this.view.ui.empty(\"top-right\");\n      this.view.ui.add(new this._Expand({\n        view: this.view,\n        content: directionsElement,\n        expanded: true,\n        mode: \"floating\"\n      }), \"top-right\");\n    }\n\n    ngOnInit() {\n      // Initialize MapView and return an instance of MapView\n      this.initializeMap().then(() => {\n        // The map has been initialized\n        console.log(\"mapView ready: \", this.view.ready);\n        this.loaded = this.view.ready;\n        this.mapLoadedEvent.emit(true);\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.view) {\n        // destroy the map view\n        this.view.container = null;\n      }\n    }\n\n  }\n\n  EsriMapComponent.ɵfac = function EsriMapComponent_Factory(t) {\n    return new (t || EsriMapComponent)();\n  };\n\n  EsriMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EsriMapComponent,\n    selectors: [[\"app-esri-map\"]],\n    viewQuery: function EsriMapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapViewEl = _t.first);\n      }\n    },\n    outputs: {\n      mapLoadedEvent: \"mapLoadedEvent\"\n    },\n    decls: 27,\n    vars: 0,\n    consts: [[\"mapViewNode\", \"\"], [\"id\", \"cuisines-filter\", 1, \"esri-widget\"], [\"data-cuisine\", \"Italian\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"data-cuisine\", \"American\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"data-cuisine\", \"Asian\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"data-cuisine\", \"Fast Food\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"data-cuisine\", \"Seafood\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"data-cuisine\", \"Steakhouse\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"data-cuisine\", \"Mexican\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"data-cuisine\", \"Vegetarian\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"data-cuisine\", \"Vegan\", 1, \"cuisine-item\", \"visible-cuisine\"], [\"id\", \"viewDiv\"], [\"id\", \"titleDiv\", 1, \"esri-widget\"], [\"id\", \"titleText\"]],\n    template: function EsriMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", null, 0)(2, \"div\", 1)(3, \"div\", 2);\n        i0.ɵɵtext(4, \"Italian\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtext(6, \"American\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵtext(8, \"Asian\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 5);\n        i0.ɵɵtext(10, \"Fast Food\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵtext(12, \"Seafood\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 7);\n        i0.ɵɵtext(14, \"Steakhouse\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 8);\n        i0.ɵɵtext(16, \"Mexican\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 9);\n        i0.ɵɵtext(18, \"Vegetarian\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 10);\n        i0.ɵɵtext(20, \"Vegan\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(21, \"div\", 11);\n        i0.ɵɵelementStart(22, \"div\", 12)(23, \"div\", 13);\n        i0.ɵɵtext(24, \"ISI To Eat\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\");\n        i0.ɵɵtext(26, \"New York City Advisor (2023)\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\".esri-view[_ngcontent-%COMP%]{min-height:100%;width:100%;height:auto;position:fixed;top:40px;left:0;z-index:1}#cuisines-filter[_ngcontent-%COMP%]{height:360px;width:100%;visibility:hidden}.cuisine-item[_ngcontent-%COMP%]{width:100%;padding:12px;text-align:center;vertical-align:baseline;cursor:pointer;height:40px}.cuisine-item[_ngcontent-%COMP%]:focus{background-color:#696969}.cuisine-item[_ngcontent-%COMP%]:hover{background-color:#696969}#titleDiv[_ngcontent-%COMP%]{padding:10px}#titleText[_ngcontent-%COMP%]{font-size:20pt;font-weight:60;padding-bottom:10px}.my_button[_ngcontent-%COMP%]{z-index:2;margin-right:800px}.esri-ui-corner[_ngcontent-%COMP%]   .esri-component[_ngcontent-%COMP%]{box-shadow:inherit}#sampleInstructions[_ngcontent-%COMP%]{padding:10px;background-color:#fff;width:300px;color:#fff}#overlayDiv[_ngcontent-%COMP%]{z-index:1;position:absolute;margin:auto;inset:0;width:280px;height:180px;padding:10px;background-color:#fff;border:1px solid grey;visibility:hidden}\"]\n  });\n  return EsriMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}